// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "api-gateway/pkg/inventory/pb"
)

// InventoryServiceClient is an autogenerated mock type for the InventoryServiceClient type
type InventoryServiceClient struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: ctx, in, opts
func (_m *InventoryServiceClient) CreateItem(ctx context.Context, in *pb.CreateItemRequest, opts ...grpc.CallOption) (*pb.CreateItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.CreateItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateItemRequest, ...grpc.CallOption) (*pb.CreateItemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateItemRequest, ...grpc.CallOption) *pb.CreateItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateItemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, in, opts
func (_m *InventoryServiceClient) DeleteItem(ctx context.Context, in *pb.DeleteItemRequest, opts ...grpc.CallOption) (*pb.DeleteItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteItemRequest, ...grpc.CallOption) (*pb.DeleteItemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteItemRequest, ...grpc.CallOption) *pb.DeleteItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteItemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInventoryItems provides a mock function with given fields: ctx, in, opts
func (_m *InventoryServiceClient) GetAllInventoryItems(ctx context.Context, in *pb.GetAllInventoryItemsRequest, opts ...grpc.CallOption) (*pb.GetAllInventoryItemsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllInventoryItemsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllInventoryItemsRequest, ...grpc.CallOption) (*pb.GetAllInventoryItemsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllInventoryItemsRequest, ...grpc.CallOption) *pb.GetAllInventoryItemsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllInventoryItemsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllInventoryItemsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllItems provides a mock function with given fields: ctx, in, opts
func (_m *InventoryServiceClient) GetAllItems(ctx context.Context, in *pb.GetAllItemsRequest, opts ...grpc.CallOption) (*pb.GetAllItemsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllItemsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllItemsRequest, ...grpc.CallOption) (*pb.GetAllItemsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllItemsRequest, ...grpc.CallOption) *pb.GetAllItemsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllItemsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllItemsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, in, opts
func (_m *InventoryServiceClient) GetItem(ctx context.Context, in *pb.GetItemRequest, opts ...grpc.CallOption) (*pb.GetItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetItemRequest, ...grpc.CallOption) (*pb.GetItemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetItemRequest, ...grpc.CallOption) *pb.GetItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetItemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, in, opts
func (_m *InventoryServiceClient) UpdateItem(ctx context.Context, in *pb.UpdateItemRequest, opts ...grpc.CallOption) (*pb.UpdateItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdateItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateItemRequest, ...grpc.CallOption) (*pb.UpdateItemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateItemRequest, ...grpc.CallOption) *pb.UpdateItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateItemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInventoryServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewInventoryServiceClient creates a new instance of InventoryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInventoryServiceClient(t mockConstructorTestingTNewInventoryServiceClient) *InventoryServiceClient {
	mock := &InventoryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
